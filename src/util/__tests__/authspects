import { describe, expect, test } from '@jest/globals'
import { hasAutorizationRole, isFinantialAdmin } from '../auth';
import * as TokenModule from '../token_token';
describe('teste with roles', () => {
  /**
   * retorna um true se existir algum role
   */
  test('hasAutorizationRole should give any role', () => {
    let roles = ['ROLE_OPERATOR', 'ROLE_ADMIN'];
    const result = hasAutorizationRole(roles);
    expect(result).toEqual(true)

  })
  /**
* retorna false se existir algum role
*/
  test('hasAutorizationRole should give not any role', () => {
    let roles = ['ROLE_OPERATOR1', 'ROLE_ADMIN1'];
    const result = hasAutorizationRole(roles);
    expect(result).toEqual(false)

  })

  /**
   *  true para usuario admin finantial
   */
  test('isFinantialAdmin should give   any role', () => {

    jest.spyOn(TokenModule, 'getTokenData').mockReturnValue(
      {
        exp: 0,
        user_name: "",
        authorities: ['ROLE_ADMIN']
      }
    )
    const result = isFinantialAdmin();
    expect(result).toEqual(true)

  })
  /**
  *  false para usuario admin e finantial
  */
  test('isFinantialAdmin should give not any role', () => {

    jest.spyOn(TokenModule, 'getTokenData').mockReturnValue(
      {
        exp: 0,
        user_name: "",
        authorities: ['ROLE_ADMINTEC']
      }
    )
    const result = isFinantialAdmin();
    expect(result).toEqual(false)
 
  })


  /**
  *  false para usuario admin
  */
  test('isAdmin should give not any role', () => {

    jest.spyOn(TokenModule, 'getTokenData').mockReturnValue(
      {
        exp: 0,
        user_name: "",
        authorities: ['ROLE_ADMINTEC']
      }
    )
    const result = isFinantialAdmin();
    expect(result).toEqual(false)

  })
  /**
    *  false para usuario admin
    */
  test('isAdmin should give   any role', () => {

    jest.spyOn(TokenModule, 'getTokenData').mockReturnValue(
      {
        exp: 0,
        user_name: "",
        authorities: ['ROLE_ADMIN']
      }
    )
    const result = isFinantialAdmin();
    expect(result).toEqual(true)

  })


})